using FastIce
using TinyKernels
using CairoMakie
using ElasticArrays
using Printf

include("bcs.jl")
include("init_vis.jl")
include("level_sets.jl")
include("stokes_ve_2_bulk_tens.jl")
include("volume_fractions.jl")

@views av1(A) = 0.5 .* (A[1:end-1] .+ A[2:end])
@views inn_x(A) = A[2:end-1,:]
@views inn_y(A) = A[:,2:end-1]
@views inn(A) = A[2:end-1,2:end-1]
nonan!(A) = .!isnan.(A) .* A

@views function runsim(::Type{DAT}; nx=127) where {DAT}
    # physics
    ly       = 10.0 # m
    A0       = 1.0 # Pa s ^ m
    œÅg0      = 0.0 # m / s ^ 2
    ŒµÃábg      = 1.0 # shear
    # nondim
    Œæ        = 1 / 4 # eta / G / dt
    De       = 1.0   # Deborah num
    npow     = 3.0
    mpow     = -(1 - 1 / npow) / 2
    # scales
    l_sc     = ly
    # œÑ_sc     = œÅg0 * l_sc                # buoyancy
    # t_sc     = (A0 / œÑ_sc) ^ (1 / mpow)  # buoyancy
    œÑ_sc     = A0 * ŒµÃábg ^ mpow  # shear
    t_sc     = 1 / ŒµÃábg          # shear
    Œ∑_sc     = œÑ_sc * t_sc
    # dependent
    lx       = 1.0 * ly
    ox, oy   = -0.5lx, -0.5ly
    xb1, yb1 = ox + 0.5lx, oy + 0.5ly
    rinc     = 0.1lx
    G        = œÑ_sc / De
    K        = 4.0 * G
    dt0      = Œæ * Œ∑_sc / G
    Œ±        = 0.0
    œïs       = 30
    œàs       = 5
    œït       = 85
    œàt       = 85
    P_y      = 0.0 * œÑ_sc # yield pressure
    P_s      = 2.0 * œÑ_sc # shift in pressure
    C0       = 1.7 * œÑ_sc
    # ŒµÃábg      = 1.0e-10 / t_sc # buoyancy
    # numerics
    nt       = 50
    ny       = ceil(Int, (nx + 1) * ly / lx) - 1
    maxiter  = 400nx
    ncheck   = 10nx
    œµtol     = (5e-6, 5e-6, 1e-6) .* 2
    œá        = 0.4       # viscosity relaxation
    Œ∑max     = 1e1       # viscosity cut-off
    œáŒª       = 0.4       # Œª relaxation
    Œ∑_reg    = 1e-2      # Plastic regularisation
    # preprocessing
    sinœïs    = sind(œïs)
    sinœàs    = sind(œàs)
    cosœïs    = cosd(œïs)
    tanœït    = tand(œït)
    tanœàt    = tand(œàt)
    tanœït2   = tand(90 - œït)
    dx, dy   = lx / nx, ly / ny
    xv, yv   = LinRange(ox, ox + lx, nx + 1), LinRange(oy, oy + ly, ny + 1)
    xc, yc   = av1(xv), av1(yv)
    mc1      = to_device(make_marker_chain_circle(Point(xb1, yb1), rinc, min(dx, dy)))
    # mc2      = to_device(make_marker_chain_circle(Point(xb2, yb2), rair, min(dx, dy)))
    œÅg       = (x=œÅg0 .* sin(Œ±), y=œÅg0 .* cos(Œ±))
    # PT parameters
    r        = 0.7
    re_mech  = 8œÄ
    lœÑ       = min(lx, ly)
    vdœÑ      = min(dx, dy) / sqrt(2.1) / 1.1
    Œ∏_dœÑ     = lœÑ * (r + 4 / 3) / (re_mech * vdœÑ)
    nudœÑ     = vdœÑ * lœÑ / re_mech
    # level set
    Œ®  = (
        not_solid = field_array(DAT, nx + 1, ny + 1), # fluid
        not_air   = field_array(DAT, nx + 1, ny + 1), # liquid
    )
    wt = (
        not_solid = volfrac_field(DAT, nx, ny), # fluid
        not_air   = volfrac_field(DAT, nx, ny), # liquid
    )
    # mechanics
    Pr    = scalar_field(DAT, nx, ny)
    Pr_c  = scalar_field(DAT, nx, ny)
    Pr_o  = scalar_field(DAT, nx, ny)
    œÑ     = tensor_field(DAT, nx, ny)
    œÑ_o   = tensor_field(DAT, nx, ny)
    Œ¥œÑ    = tensor_field(DAT, nx, ny)
    Œµ     = tensor_field(DAT, nx, ny)
    Œµ_ve  = tensor_field(DAT, nx, ny)
    V     = vector_field(DAT, nx, ny)
    Œ∑s    = scalar_field(DAT, nx, ny)
    Œ∑_ve  = scalar_field(DAT, nx, ny)
    ŒµII   = scalar_field(DAT, nx, ny)
    œÑII   = scalar_field(DAT, nx, ny)
    Fchk  = scalar_field(DAT, nx, ny)
    Ft    = scalar_field(DAT, nx, ny)
    Fs    = scalar_field(DAT, nx, ny)
    Fc    = scalar_field(DAT, nx, ny)
    Œª     = scalar_field(DAT, nx, ny)
    C     = scalar_field(DAT, nx, ny)
    Œì     = scalar_field(DAT, nx, ny)
    # residuals
    Res = (
        Pr = scalar_field(DAT, nx    , ny    ),
        V  = vector_field(DAT, nx - 2, ny - 2),
    )
    # visualisation
    Vmag = field_array(DAT, nx - 2, ny - 2)
    Œ®av = (
        not_solid = field_array(DAT, nx - 2, ny - 2),
        not_air   = field_array(DAT, nx - 2, ny - 2),
    )
    # initialisation
    for comp in eachindex(œÑ) fill!(œÑ[comp] , 0.0) end
    for comp in eachindex(Œ¥œÑ) fill!(Œ¥œÑ[comp], 0.0) end
    for comp in eachindex(Œµ) fill!(Œµ[comp] , 0.0) end
    for comp in eachindex(Œµ_ve) fill!(Œµ_ve[comp] , 0.0) end
    fill!(Pr   , P_s)
    fill!(Pr_c , P_s)
    fill!(Pr_o , P_s)
    fill!(Œ∑s   , Œ∑_sc)
    fill!(Œ∑_ve , (1.0 / Œ∑_sc + 1.0 / (G * dt0))^-1)
    fill!(œÑII  , 0.0)
    fill!(ŒµII  , 1e-10)
    fill!(Ft   , -1.0)
    fill!(Fs   , -1.0)
    fill!(Fc   , -1.0)
    fill!(Fchk , -1.0)
    fill!(Œª    , 0.0)
    fill!(C    , C0)
    fill!(Œì    , 0.0)

    init!(V, ŒµÃábg, xv, yv)
    # V.y .= 0.0

    # compute level sets
    for comp in eachindex(Œ®) fill!(Œ®[comp], 1.0) end
    Œ®.not_air .= Inf # needs init now
    @info "computing the level set for the inclusion"
    compute_levelset!(Œ®.not_air, xv, yv, mc1)
    # compute_levelset!(Œ®.not_air, xv, yv, mc2)
    TinyKernels.device_synchronize(get_device())
    # Œ®.not_air .= min.( .-(0.0 .* xv .+ yv' .+ oy .+ 0.05), Œ®.not_air)
    @. Œ®.not_air = -Œ®.not_air

    @info "computing the level set for the bedrock"
    @. Œ®.not_solid = -(0.0 * xv + yv' - 0.05)

    @info "computing volume fractions from level sets"
    compute_volume_fractions_from_level_set!(wt.not_air, Œ®.not_air, dx, dy)
    # compute_volume_fractions_from_level_set!(wt.not_solid, Œ®.not_solid, dx, dy)
    for comp in eachindex(wt.not_solid) fill!(wt.not_solid[comp], 1.0) end

    update_vis!(Vmag, Œ®av, V, Œ®)
    # convergence history
    iter_evo = Float64[]
    errs_evo = ElasticArray{Float64}(undef, length(œµtol), 0)

    # Plot yield functions
    P = collect(LinRange(-0.5, 4, 500))
    (_, iP) = findmin(abs.(P .- P_y))
    Pshear = P[iP:end]
    Ptens  = P[1:iP]
    œÑs1    = C0 * cosœïs .+ P_y .* sinœïs
    Ct     = ((œÑs1 * tanœït2) - P_y) / tanœït2
    œÑIIs   = C0 * cosœïs .+ Pshear .* sinœïs
    œÑIIt   = Ct         .+ Ptens  .* tanœït

    # figures
    fig = Figure(resolution=(2500, 1800), fontsize=32)
    ax = (
        Pr  =Axis(fig[1, 1][1, 1]; aspect=DataAspect(), title="p"),
        œÑII =Axis(fig[1, 2][1, 1]; aspect=DataAspect(), title="œÑII"),
        wt  =Axis(fig[1, 3][1, 1]; aspect=DataAspect(), title="Volume fraction"),
        Vmag=Axis(fig[2, 1][1, 1]; aspect=DataAspect(), title="|v|"),
        ŒµII =Axis(fig[2, 2][1, 1]; aspect=DataAspect(), title="ŒµII"),
        Œ∑s  =Axis(fig[2, 3][1, 1]; aspect=DataAspect(), title="log10(Œ∑s)"),
        Œª   =Axis(fig[3, 1][1, 1]; aspect=DataAspect(), title="Œª"),
        # Fs  =Axis(fig[3, 2][1, 1]; aspect=DataAspect(), title="F"),
        Fs  =Axis(fig[3, 2][1, 1]; title="F", xlabel="P", ylabel="œÑII"),
        errs=Axis(fig[3, 3]      ; yscale=log10, title="Convergence", xlabel="#iter/ny", ylabel="error"),
    )
    plt = (
        fields=(
            Pr  =heatmap!(ax.Pr  , xc, yc, to_host(Pr  ); colormap=:turbo),
            œÑII =heatmap!(ax.œÑII , xc, yc, to_host(œÑII ); colormap=:turbo),
            wt  =heatmap!(ax.wt  , xc, yc, to_host(wt.not_air.c); colormap=Reverse(:grays)),
            Vmag=heatmap!(ax.Vmag, xc, yc, to_host(Vmag); colormap=:turbo),
            ŒµII =heatmap!(ax.ŒµII , xc, yc, to_host(ŒµII ); colormap=:turbo),
            Œ∑s  =heatmap!(ax.Œ∑s  , xc, yc, to_host(log10.(Œ∑s)); colormap=:turbo),
            Œª   =heatmap!(ax.Œª   , xc, yc, to_host(Œª   ); colormap=:turbo),
            # Fs  =heatmap!(ax.Fs  , xc, yc, to_host(Fs  ); colormap=:turbo),
            Fs  =scatter!(ax.Fs  , Point2f.(to_host(Pr_c)[:], to_host(œÑII)[:]), color=Fchk[:], colormap=:turbo),#markerspace=:data, markersize=r0
            Fs2 =lines!(ax.Fs, Pshear, œÑIIs, label="shear", linewidth=4),
            Fs3 =lines!(ax.Fs, Ptens,  œÑIIt; label="tension", linewidth=4),
            Fs4 =ylims!(ax.Fs, -2.5, 3.5),
        ),
        errs=[scatterlines!(ax.errs, Point2.(iter_evo, errs_evo[ir, :])) for ir in eachindex(œµtol)],
    )
    Colorbar(fig[1, 1][1, 2], plt.fields.Pr  )
    Colorbar(fig[1, 2][1, 2], plt.fields.œÑII )
    Colorbar(fig[1, 3][1, 2], plt.fields.wt  )
    Colorbar(fig[2, 1][1, 2], plt.fields.Vmag)
    Colorbar(fig[2, 2][1, 2], plt.fields.ŒµII )
    Colorbar(fig[2, 3][1, 2], plt.fields.Œ∑s  )
    Colorbar(fig[3, 1][1, 2], plt.fields.Œª   )
    Colorbar(fig[3, 2][1, 2], plt.fields.Fs  )
    axislegend(ax.Fs, position=:rb)
    display(fig)
    maskA = copy(to_host(wt.not_air.c))
    maskS = copy(to_host(wt.not_solid.c))
    maskA[maskA.<1.0] .= NaN
    maskS[maskS.<1.0] .= NaN
    mask = maskA .* maskS

    # error("stop")
    @info "running simulation üöÄ"
    for it in 1:nt
        (it >= 6 && it <= 10) ? dt = dt0 / 1 : dt = dt0 # if npow=3
        @printf "it # %d, dt = %1.3e \n" it dt
        update_old!(œÑ_o, œÑ, Pr_o, Pr_c, Pr, Œª)
        # iteration loop
        empty!(iter_evo); resize!(errs_evo, length(œµtol), 0)
        iter = 0; errs = 2.0 .* œµtol
        while any(errs .>= œµtol) && (iter += 1) <= maxiter
            increment_œÑ!(Pr, Pr_o, Œµ, Œµ_ve, Œ¥œÑ, œÑ, œÑ_o, V, Œ∑_ve, Œ∑s, G, K, dt, wt, r, Œ∏_dœÑ, dx, dy)
            compute_xyc!(Œµ, Œµ_ve, Œ¥œÑ, œÑ, œÑ_o, Œ∑_ve, Œ∑s, G, dt, Œ∏_dœÑ, wt)
            compute_trial_œÑII!(œÑII, Œ¥œÑ, œÑ)
            update_œÑ!(Pr, Pr_c, Œµ_ve, œÑ, Œ∑s, Œ∑_ve, G, K, dt, œÑII, Ft, Fs, Fc, Œª, Œì, C, cosœïs, P_y, sinœïs, tanœït, tanœït2, sinœàs, tanœàt, Œ∑_reg, œáŒª, Œ∏_dœÑ, wt)
            compute_Fchk_xII_Œ∑!(œÑII, Fchk, ŒµII, Œ∑s, Pr_c, œÑ, Œµ, Œª, Œì, C, cosœïs, P_y, sinœïs, tanœït, Œ∑_reg, wt, œá, mpow, Œ∑max)
            update_V!(V, Pr_c, œÑ, Œ∑s, wt, nudœÑ, œÅg, dx, dy)
            # Pr .= Pr_c
            if iter % ncheck == 0
                compute_residual!(Res, Pr, Pr_o, Pr_c, V, œÑ, K, dt, wt, œÅg, dx, dy)
                errs = (maximum(abs.(Res.V.x)), maximum(abs.(Res.V.y)), maximum(abs.(Res.Pr)))
                @printf "  iter/nx # %2.1f, errs: [ Vx = %1.3e, Vy = %1.3e, Pr = %1.3e ]\n" iter / nx errs...
                @printf "    max(F) = %1.3e, max(œÑII) = %1.3e \n" maximum(nonan!(Fchk)) maximum(nonan!(œÑII))
                sum(Œì[Œì.==1])>0 && (@printf "    max(F[Œì==1]) = %1.3e, \n" maximum(Fchk[Œì.==1]))
                sum(Œì[Œì.==2])>0 && (@printf "    max(F[Œì==2]) = %1.3e, \n" maximum(Fchk[Œì.==2]))
                sum(Œì[Œì.==3])>0 && (@printf "    max(F[Œì==3]) = %1.3e, \n" maximum(Fchk[Œì.==3]))
                push!(iter_evo, iter / nx); append!(errs_evo, errs)
                # visu
                for ir in eachindex(plt.errs)
                    plt.errs[ir][1] = Point2.(iter_evo, errs_evo[ir, :])
                end
                autolimits!(ax.errs)
                update_vis!(Vmag, Œ®av, V, Œ®)
                plt.fields[1][3] = to_host(Pr_c) .* mask
                plt.fields[2][3] = to_host(œÑII) .* mask
                plt.fields[3][3] = to_host(wt.not_air.c)
                plt.fields[4][3] = to_host(Vmag) .* inn(mask)
                plt.fields[5][3] = to_host(C) .* mask
                plt.fields[6][3] = to_host(log10.(Œ∑s)) .* mask
                plt.fields[7][3] = to_host(Œì) .* mask
                # plt.fields[8][3] = to_host(Fchk) .* mask
                plt.fields[8][1] = Point2f.(to_host(Pr_c)[:], to_host(œÑII)[:]); plt.fields[8].color[] = Œì[:] #Œì[:] #
                # plt.fields[8][3] = to_host(Œì) .* mask
                display(fig)
            end
        end
        dC = 0.5 * C0
        C[Œì.==1.0 .|| Œì.==3.0] .-= dC
        C[C.<C0/50] .= C0 / 50
    end
    return
end

runsim(Float64, nx=127)