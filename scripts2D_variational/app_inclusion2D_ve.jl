using FastIce
using TinyKernels
using CairoMakie
using ElasticArrays
using Printf

include("bcs.jl")
include("helpers_tmp.jl")
include("level_sets.jl")
include("stokes_ve.jl")
include("volume_fractions.jl")

@views av1(A) = 0.5 .* (A[1:end-1] .+ A[2:end])
@views inn_x(A) = A[2:end-1,:]
@views inn_y(A) = A[:,2:end-1]
@views inn(A) = A[2:end-1,2:end-1]

@views function runsim(::Type{DAT}; nx=127) where {DAT}
    # physics
    lx, ly   = 1.0, 1.0
    ox, oy   = -0.5lx, -0.5ly
    xb1, yb1 = ox + 0.5lx, oy + 0.5ly
    rinc     = 0.1ly
    Œ∑s0      = 1.0
    G        = 1.0
    œÅg0      = 0.0
    Œ±        = 0.0
    npow     = 1.1
    œÑ_y      = 2.0
    sinœï     = sind(30)
    ŒµÃábg      = 1.0
    Œæ        = 2.0
    # numerics
    nt       = 50
    ny       = ceil(Int, (nx + 1) * ly / lx) - 1
    maxiter  = 400nx
    ncheck   = 10nx
    œµtol     = (1e-6, 1e-6, 1e-6)
    œá        = 0.8       # viscosity relaxation
    Œ∑max     = 1e1       # viscosity cut-off
    œáŒª       = 0.2       # Œª relaxation
    Œ∑_reg    = 1e-2      # Plastic regularisation
    # preprocessing
    dx, dy   = lx / nx, ly / ny
    xv, yv   = LinRange(ox, ox + lx, nx + 1), LinRange(oy, oy + ly, ny + 1)
    xc, yc   = av1(xv), av1(yv)
    mc1      = to_device(make_marker_chain_circle(Point(xb1, yb1), rinc, min(dx, dy)))
    œÅg       = (x=œÅg0 .* sin(Œ±), y=œÅg0 .* cos(Œ±))
    mpow     = -(1 - 1 / npow) / 2
    dt       = Œ∑s0 / (G * Œæ)
    # PT parameters
    r        = 0.7
    re_mech  = 7œÄ
    lœÑ       = min(lx, ly)
    vdœÑ      = min(dx, dy) / sqrt(2.1) / 1.0
    Œ∏_dœÑ     = lœÑ * (r + 4 / 3) / (re_mech * vdœÑ)
    nudœÑ     = vdœÑ * lœÑ / re_mech
    dœÑ_r     = 1.0 / (Œ∏_dœÑ + 1.0)
    # level set
    Œ®  = (
        not_air = field_array(DAT, nx + 1, ny + 1), # liquid
    )
    wt = (
        not_solid = volfrac_field(DAT, nx, ny), # fluid
        not_air   = volfrac_field(DAT, nx, ny), # liquid
    )
    # mechanics
    Pr   = scalar_field(DAT, nx, ny)
    œÑ    = tensor_field(DAT, nx, ny)
    œÑ_o  = tensor_field(DAT, nx, ny)
    Œ¥œÑ   = tensor_field(DAT, nx, ny)
    Œµ    = tensor_field(DAT, nx, ny)
    V    = vector_field(DAT, nx, ny)
    Œ∑s   = scalar_field(DAT, nx, ny)
    ŒµII  = scalar_field(DAT, nx, ny)
    œÑII  = scalar_field(DAT, nx, ny)
    Fchk = scalar_field(DAT, nx, ny)
    F    = scalar_field(DAT, nx, ny)
    Œª    = scalar_field(DAT, nx, ny)
    # residuals
    Res = (
        Pr = scalar_field(DAT, nx    , ny    ),
        V  = vector_field(DAT, nx - 2, ny - 2),
    )
    # visualisation
    Vmag = field_array(DAT, nx - 2, ny - 2)
    Œ®av = (
        not_solid = field_array(DAT, nx - 2, ny - 2),
        not_air   = field_array(DAT, nx - 2, ny - 2),
    )
    # initial and boundary conditions
    @info "computing the level set for the inclusion"
    for comp in eachindex(Œ®) fill!(Œ®[comp], 1.0) end
    init!(Pr, œÑ, Œ¥œÑ, Œµ, V, Œ∑s, ŒµÃábg, Œ∑s0, xv, yv)
    fill!(œÑII, 0.0)
    fill!(ŒµII, 0.0)
    fill!(F, -1.0)
    fill!(Fchk, 0.0)
    fill!(Œª, 0.0)
    Œ®.not_air .= Inf # needs init now
    compute_levelset!(Œ®.not_air, xv, yv, mc1)
    # compute_levelset!(Œ®.not_air, xv, yv, mc2)
    Œ®.not_air .= .-Œ®.not_air

    @info "computing volume fractions from level sets"
    compute_volume_fractions_from_level_set!(wt.not_air, Œ®.not_air, dx, dy)
    for comp in eachindex(wt.not_solid) fill!(wt.not_solid[comp], 1.0) end

    update_vis!(Vmag, Œ®av, V, Œ®)
    # convergence history
    iter_evo = Float64[]
    errs_evo = ElasticArray{Float64}(undef, length(œµtol), 0)
    # figures
    fig = Figure(resolution=(2500, 1800), fontsize=32)
    ax = (
        Pr  =Axis(fig[1, 1][1, 1]; aspect=DataAspect(), title="p"),
        œÑII =Axis(fig[1, 2][1, 1]; aspect=DataAspect(), title="œÑII"),
        wt  =Axis(fig[1, 3][1, 1]; aspect=DataAspect(), title="Volume fraction"),
        Vmag=Axis(fig[2, 1][1, 1]; aspect=DataAspect(), title="|v|"),
        ŒµII =Axis(fig[2, 2][1, 1]; aspect=DataAspect(), title="ŒµII"),
        Œ∑s  =Axis(fig[2, 3][1, 1]; aspect=DataAspect(), title="log10(Œ∑s)"),
        Œª   =Axis(fig[3, 1][1, 1]; aspect=DataAspect(), title="Œª"),
        F   =Axis(fig[3, 2][1, 1]; aspect=DataAspect(), title="F"),
        errs=Axis(fig[3, 3]      ; yscale=log10, title="Convergence", xlabel="#iter/ny", ylabel="error"),
    )
    plt = (
        fields=(
            Pr  =heatmap!(ax.Pr  , xc, yc, to_host(Pr  ); colormap=:turbo),
            œÑII =heatmap!(ax.œÑII , xc, yc, to_host(œÑII ); colormap=:turbo),
            wt  =heatmap!(ax.wt  , xc, yc, to_host(wt.not_air.c); colormap=Reverse(:grays)),
            Vmag=heatmap!(ax.Vmag, xc, yc, to_host(Vmag); colormap=:turbo),
            ŒµII =heatmap!(ax.ŒµII , xc, yc, to_host(ŒµII ); colormap=:turbo),
            Œ∑s  =heatmap!(ax.Œ∑s  , xc, yc, to_host(log10.(Œ∑s)); colormap=:turbo),
            Œª   =heatmap!(ax.Œª   , xc, yc, to_host(Œª   ); colormap=:turbo),
            F   =heatmap!(ax.F   , xc, yc, to_host(F   ); colormap=:turbo),
        ),
        errs=[scatterlines!(ax.errs, Point2.(iter_evo, errs_evo[ir, :])) for ir in eachindex(œµtol)],
    )
    Colorbar(fig[1, 1][1, 2], plt.fields.Pr  )
    Colorbar(fig[1, 2][1, 2], plt.fields.œÑII )
    Colorbar(fig[1, 3][1, 2], plt.fields.wt  )
    Colorbar(fig[2, 1][1, 2], plt.fields.Vmag)
    Colorbar(fig[2, 2][1, 2], plt.fields.ŒµII )
    Colorbar(fig[2, 3][1, 2], plt.fields.Œ∑s  )
    Colorbar(fig[3, 1][1, 2], plt.fields.Œª   )
    Colorbar(fig[3, 2][1, 2], plt.fields.F   )
    display(fig)
    mask = copy(to_host(wt.not_air.c))
    mask[mask.<1.0] .= NaN

    @info "running simulation üöÄ"
    for it in 1:nt
        @printf "it # %d, dt = %1.3e \n" it dt
        # bc_x_dirichlet!((-xv[1], -xv[end]) .* ŒµÃábg, V.x)
        # bc_y_dirichlet!(( yv[1],  yv[end]) .* ŒµÃábg, V.y)
        update_old!(œÑ_o, œÑ, Œª)
        # iteration loop
        empty!(iter_evo); resize!(errs_evo, length(œµtol), 0)
        iter = 0; errs = 2.0 .* œµtol
        while any(errs .>= œµtol) && (iter += 1) <= maxiter
            increment_œÑ!(Pr, Œµ, Œ¥œÑ, œÑ, œÑ_o, V, Œ∑s, G, dt, wt, r, Œ∏_dœÑ, dx, dy)
            compute_xyc!(Œµ, Œ¥œÑ, œÑ, œÑ_o, Œ∑s, G, dt, Œ∏_dœÑ, wt)
            compute_trial_œÑII!(œÑII, Œ¥œÑ, œÑ)
            update_œÑ!(Pr, Œµ, Œ¥œÑ, œÑ, œÑ_o, Œ∑s, G, dt, œÑII, F, Œª, œÑ_y, sinœï, Œ∑_reg, œáŒª, Œ∏_dœÑ, wt)
            compute_Fchk_xII_Œ∑!(œÑII, Fchk, ŒµII, Œ∑s, Pr, œÑ, Œµ, Œª, œÑ_y, sinœï, Œ∑_reg, wt, œá, mpow, Œ∑max)
            update_V!(V, Pr, œÑ, Œ∑s, wt, nudœÑ, œÅg, dx, dy)
            if iter % ncheck == 0
                compute_residual!(Res, Pr, V, œÑ, wt, œÅg, dx, dy)
                errs = (maximum(abs.(Res.V.x)), maximum(abs.(Res.V.y)), maximum(abs.(Res.Pr)))
                @printf "  iter/nx # %2.1f, errs: [ Vx = %1.3e, Vy = %1.3e, Pr = %1.3e ]\n" iter / nx errs...
                @printf "    max(F) = %1.3e, max(œÑII) = %1.3e \n" maximum(Fchk) maximum(œÑII)
                push!(iter_evo, iter / nx); append!(errs_evo, errs)
                # visu
                for ir in eachindex(plt.errs)
                    plt.errs[ir][1] = Point2.(iter_evo, errs_evo[ir, :])
                end
                autolimits!(ax.errs)
                update_vis!(Vmag, Œ®av, V, Œ®)
                plt.fields[1][3] = to_host(Pr) .* mask
                plt.fields[2][3] = to_host(œÑII) .* mask
                plt.fields[3][3] = to_host(wt.not_air.c)
                plt.fields[4][3] = to_host(Vmag) .* inn(mask)
                plt.fields[5][3] = to_host(ŒµII) .* mask
                plt.fields[6][3] = to_host(log10.(Œ∑s)) .* mask
                plt.fields[7][3] = to_host(Œª) .* mask
                plt.fields[8][3] = to_host(Fchk) .* mask
                display(fig)
            end
        end
    end
    return
end

runsim(Float64, nx=127)